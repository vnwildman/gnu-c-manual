
@c This is part of The GNU C Reference Manual
@c Copyright (C) 2003, 2004, 2006-2009 Free Software Foundation, Inc.
@c See the file gnu-c-manual.texi for copying conditions.

@node Câu lệnh
@chapter Câu lệnh
@cindex câu lệnh

Bạn viết câu lệnh để mà thực thi hành động hay điều khiển việc rẽ nhánh trong một
chương trình của mình.  Bạn cũng còn có thể viết câu lệnh mà nó chẳng làm gì cả,
hay làm những thứ rất bình thường.

@menu
* Nhãn::
* Câu lệnh bằng Biểu thức::       
* Câu lệnh if::     
* Câu lệnh switch::  
* Câu lệnh while::  
* Câu lệnh do::     
* Câu lệnh for::    
* Khối lệnh::                      
* Câu lệnh Rỗng::          
* Câu lệnh goto::   
* Câu lệnh break::  
* Câu lệnh continue::  
* Câu lệnh return::  
* Câu lệnh typedef::
@end menu

@node Nhãn
@section Nhãn
@cindex nhãn
@cindex nhãn câu lệnh
@cindex câu lệnh, nhãn

Bạn có thể sử dụng nhãn để đại diện vùng mà mã nguồn sử dụng sau này
với @code{goto} (@pxref{Câu lệnh goto}).  Một nhãn bao gồm một
định danh (giống như sử dụng cho tên biến) theo sau là một
dấu hai chấm.  Đây là một ví dụ:

@example
@group
treet:
@end group
@end example

Bạn nên hiểu rằng tên của nhãn không được xung đột với các
định danh khác:

@example
@group
int treet = 5;    /* @r{biến @code{treet}.} */
treet:            /* @r{nhãn @code{treet}.} */
@end group
@end example

Theo tiêu chuẩn ISO C yêu cầu rằng theo sau nhãn phải có ít nhất một
câu lệnh, một câu lệnh rỗng cũng được (@pxref{Câu lệnh Rỗng}).
GCC sẽ dịch mã nguồn mà không yêu cầu điều này, nhưng cần phải hiểu rằng
nếu bạn lạm dụng nó, mã chương trình của bạn sẽ không tương thích với các
trình dịch khác.


@node Câu lệnh bằng Biểu thức
@section Câu lệnh bằng Biểu thức
@cindex câu lệnh bằng biểu thức
@cindex câu lệnh, biểu thức

Bạn kết tạo bất kỳ một biểu thức nào thành một câu lệnh bằng cách thêm dấu chấm phẩy
vào cuối của biểu thức.  Đây là một ví dụ:

@example
@group
5;
2 + 2;
10 >= 9;
@end group
@end example

Từng cái trong số đó, việc tất cả đều xảy ra là mỗi biểu thức được định
giá trị.  Tuy nhiên, chúng chẳng để làm gì cả bởi vì chúng không lưu trữ
giá trị ở đâu cả, cũng không làm được gì thực tế, chẳng qua chỉ là
sự tự định giá trị.  Trình dịch sẽ tự loại bỏ những câu lệnh
như thế này.

Câu lệnh bằng biểu thức chỉ hữu dụng khi chúng tạo ra được một
số tác dụng, như là lưu giá trị, gọi hàm, hay
(đây là bí mật) là nguyên nhân hỏng hóc trong một chương trình.  Sau đây là
một số ví dụ hữu dụng:

@example
@group
x++;
y = x + 25;
puts ("Hello, user!");
*cucumber;
@end group
@end example

Câu lệnh cuối cùng trong số chúng, @code{*cucumber;}, có khả năng
là nguyên nhân đổ vỡ của một chương trình nếu như giá trị của @code{cucumber} không là
một con trỏ hợp lệ và được khai báo là @code{volatile}.

@comment reference to `volatile'


@node Câu lệnh if
@section Câu lệnh @code{if}
@cindex câu lệnh @code{if}
@cindex câu lệnh @code{else}

Bạn có thể sử dụng câu lệnh @code{if} để thực thi một cách có điều kiện một phần của
chương trình của mình, trên cơ sở giá trị đúng được đưa ra bởi biểu thức.  Đây là
dạng thức chung của câu lệnh @code{if}:

@example
@group
if (@var{test})
  @var{then-statement}
else
  @var{else-statement}
@end group
@end example

Nếu @var{test} được ước lượng là đúng, thế thì @var{then-statement} được thực thi và
@var{else-statement} không thực hiện.  Nếu @var{test} được ước tính là sai, thế thì
@var{else-statement} được thực hiện và @var{then-statement} thì không.  Mệnh đề
@code{else} là tùy chọn.

Đây là một ví dụ thực tế:

@example
@group
if (x == 10)
  puts ("x is 10");
@end group
@end example

Nếu @code{x == 10} được ước lượng là đúng, thế thì câu lệnh
@code{puts ("x is 10");} được thực thi.  Nếu @code{x == 10} được ước lượng là
sai, thế thì câu lệnh @code{puts ("x is 10");} không được thực hiện.

Đây là một ví dụ sử dụng @code{else}:

@example
@group
if (x == 10)
  puts ("x is 10");
else
  puts ("x is not 10");
@end group
@end example

Bạn có thể sử dụng các câu lệnh @code{if} nối tiếp nhau để kiểm tra
nhiều điều kiện:

@example
@group
if (x == 1)
  puts ("x is 1");
else if (x == 2)
  puts ("x is 2");
else if (x == 3)
  puts ("x is 3");
else
  puts ("x is something else");
@end group
@end example

Hàm sau sẽ tính toán và hiện thị ngày tháng Phục Sinh cho năm @code{y} được đưa ra:

@example
void
easterDate (int y)
@{
  int n = 0;
  int g = (y % 19) + 1;
  int c = (y / 100) + 1;
  int x = ((3 * c) / 4) - 12;
  int z = (((8 * c) + 5) / 25) - 5;
  int d = ((5 * y) / 4) - x - 10;
  int e = ((11 * g) + 20 + z - x) % 30;

  if (((e == 25) && (g > 11)) || (e == 24))
    e++;

  n = 44 - e;

  if (n < 21)
    n += 30;

  n = n + 7 - ((d + n) % 7);

  if (n > 31)
    printf ("Easter: %d April %d", n - 31, y);
  else
    printf ("Easter: %d March %d", n, y);
@}
@end example

@node Câu lệnh switch
@section Câu lệnh @code{switch}
@cindex câu lệnh @code{switch}

Bạn có thể sử dụng câu lệnh @code{switch} để so sánh một biểu thức này với những cái khác,
và thực hiện một chuỗi các câu lệnh con trên cơ sở kết quả trả về từ việc
so sánh.  Sau đây là dạng thức chung của câu lệnh @code{switch}:

@example
@group
switch (@var{test})
  @{
    case @var{compare-1}:
      @var{if-equal-statement-1}
    case @var{compare-2}:
      @var{if-equal-statement-2}
    @dots{}
    default:
      @var{default-statement}
  @}
@end group
@end example

Câu lệnh @code{switch} so sánh @var{test} với từng biểu thức
@var{compare}, cho đến khi nó tìm thấy một cái mà nó
bằng với @var{test}.  Sau đó, các câu lệnh theo sau bởi case thành công
đó sẽ được thi hành.  Tất cả các biểu thức để so sánh phải là thuộc kiểu dữ liệu
số nguyên, và biểu thức @var{compare-N} phải là kiểu hằng
số nguyên (ví dụ, một số nguyên hay một biểu thức xây dựng nên số nguyên).

Đây là tùy chọn, bạn có thể chỉ định một case mặc định.  Nếu như @var{test} không khớp
với bất kỳ cases được liệt kê nào trước case mặc định, thế thì
câu lệnh dành cho case mặc định sẽ được thực thi.  Theo kiểu cổ điển,
case mặc định được đặt sau các cases khác, nhưng đây không phải là điều bắt buộc.


@example
@group
switch (x)
  @{
    case 0:
      puts ("x is 0");
      break;
    case 1:
      puts ("x is 1");
      break;
    default:
      puts ("x is something else");
      break;
  @}
@end group
@end example

Chú ý đến cách dùng của câu lệnh @code{break} trong mỗi case.  Đó là
bởi vì, một khi việc khớp với case được tìm thấy, không chỉ những lệnh của nó
được thi hành, mà toàn bộ các câu lệnh theo sau nó nữa:

@example
@group
int x = 0;
switch (x)
  @{
    case 0:
      puts ("x is 0");
    case 1:
      puts ("x is 1");
    default:
      puts ("x is something else");
  @}
@end group
@end example

@noindent
Kết quả sẽ là:

@example
@group
x is 0
x is 1
x is something else
@end group
@end example

Đây không phải là thứ mọi người mong muốn.  Việc gộp thêm câu lệnh @code{break} tại cuối
mỗi case sẽ làm chuyển hướng chương trình ra sau câu lệnh @code{switch}.

Phần mở rộng GNU C cho phép bạn cũng có thể chỉ định một vùng các số nguyên liên tiếp
nhau cho giá trị của một nhãn @code{case}, như thế này:

@example
case @var{low} ... @var{high}:
@end example

@noindent
Cách này có hiệu ứng giống với việc từng nhãn @code{case}
riêng lẻ được gán cho một trong mỗi giá trị nguyên từ @var{low} đến @var{high}, tất cả.

Đặc tính này cực kỳ hữu dụng cho một vùng mã ASCII:

@example
case 'A' ... 'Z':
@end example

Hãy cẩn thận với việc có các khoảng trắng xung quanh @code{...}; hay nó cách khác nó
có thể phân tích không đúng khi bạn sử dụng nó với các số nguyên.
Ví dụ như, nếu viết thế này:

@example
case 1 ... 5:
@end example

@noindent
Thay vì viết:

@example
case 1...5:
@end example

Việc sử dụng câu lệnh @code{switch} như trên thông thường để xử lý các giá trị
khác nhau của @code{errno}.  Trong trường hợp này một chương trình
ngoài có thể theo dõi tình trạng mà hai macros cho giá trị @code{errno}
trên thực tế có giá trị là cùng một, ví dụ như @code{EWOULDBLOCK} và
@code{EAGAIN}.


@node Câu lệnh while
@section Câu lệnh @code{while}
@cindex câu lệnh @code{while}

Câu lệnh @code{while} thực hiện việc lặp đi lặp lại các câu lệnh với điều kiện lặp được đặt
ở đầu vòng lặp.  Đây là dạng thức chung của câu lệnh
@code{while}:

@example
@group
while (@var{test})
  @var{statement}
@end group
@end example

Câu lệnh @code{while} đầu tiên sẽ ước lượng giá trị của @var{test}.  Nếu @var{test}
được đánh giá là đúng, câu lệnh @var{statement} được thực thi, và sau đó @var{test} lại
được đánh giá lại. Câu lệnh  @var{statement} tiếp tục được thực hiện lặp đi lặp lại khi
@var{test} là đúng sau khi thực hiện lệnh @var{statement}.  

Ví dụ này in ra các giá trị nguyên từ không đến chín:

@example
@group
int counter = 0;
while (counter < 10)
  printf ("%d ", counter++);
@end group
@end example

Câu lệnh @code{break} có thể sử dụng để kết thúc vòng lặp @code{while}.

@node Câu lệnh do
@section The Câu lệnh @code{do}
@cindex câu lệnh @code{do}

Câu lệnh @code{do} là vòng lặp với điều kiện kiểm tra việc lặp đặt tại
đầu của vòng lặp.  Đây là dạng thức chung của câu lệnh @code{do}:

@example
@group
do
  @var{statement}
while (@var{test});
@end group
@end example

Câu lệnh @code{do} trước tiên thực hiện câu lệnh @var{statement}.  Sau đó,
nó ước lượng giá trị của @var{test}.  Nếu @var{test} là đúng, thế thì câu lệnh @var{statement} được
thực hiện lặp lại.  Câu lệnh @var{statement} sẽ tiếp tục được lặp đi lặp lại khi mà
giá trị @var{test} vẫn đúng sau khi thực hiện câu lệnh @var{statement}.

Ví dụ này cũng in ra các giá trị nguyên từ không đến chín:

@example
@group
int x = 0;
do
  printf ("%d ", x++);
while (x < 10);
@end group
@end example

Câu lệnh @code{break} có thể sử dụng để kết thúc vòng lặp @code{do}.

@node Câu lệnh for
@section Câu lệnh @code{for}
@cindex câu lệnh @code{for}

Câu lệnh @code{for} thực hiện vòng lặp lệnh mà cấu trúc của nó cho phép
dễ dàng khởi tạo biến, biểu thức điều kiện, và thay đổi giá trị
của biến.  Nó rất thuận tiện cho việc tạo ra biến đếm điều khiển
vòng lặp.  Đây là dạng thức chung của câu lệnh @code{for}:

@example
for (@var{initialize}; @var{test}; @var{step})
  @var{statement}
@end example

Câu lệnh @code{for} trước hết ước lượng giá trị của biểu thức @var{initialize}.
Sau đó nó kiểm tra điều kiện @var{test}.  Nếu @var{test} là sai, thế thì
vòng lệnh sẽ kết thúc và lệnh được chuyển hướng xuống sau @var{statement}.  Nếu không,
@var{test} là đúng, vậy thì lệnh @var{statement} được thực hiện.  Cuối cùng,
@var{step} được tính, và lại lặp lại từ đầu bằng việc ước lượng
giá trị của @var{test} lần nữa.

Thường thấy nhất, @var{initialize} gán giá trị cho một hay nhiều biến,
mà chúng thường được sử dụng làm con đếm,  @var{test} so sánh những
biến này để tạo với điều kiện lặp, và @var{step} thay đổi giá trị của
các biến này.  Đây là một ví dụ khác mà nó in ra các số nguyên
không đến chín:

@example
@group
int x;
for (x = 0; x < 10; x++)
  printf ("%d ", x);
@end group
@end example

Trước hết nó thực hiện việc @var{initialize}, mà nó gán cho @code{x} giá trị
là 0.  Thế thì, khi mà @code{x} còn nhỏ hơn 10, giá trị của @code{x}
được in ra (trong phần thân của vòng lặp).  Giá trị của @code{x} được tăng thêm một
trong mệnh đề @var{step} và quá trình kiểm tra điều kiện lại được lặp lại.

Cả ba biểu thức trong câu lệnh @code{for} là tùy chọn, và bất kỳ
tổ hợp ba nào đều hợp lệ.  Biểu thức đầu tiên chỉ được ước lượng
một lần, và nó có lẽ là biểu thức duy nhất có thể bỏ qua.  Bạn còn có thể
viết ví dụ phía trên như thế này:

@example
@group
int x = 1;
for (; x <= 10; x++)
  printf ("%d ", x);
@end group
@end example

@noindent
Trong ví dụ này, @code{x} nhận giá trị của nó trước khi bắt đầu
vòng lặp @code{for}.

Nếu bạn bỏ đi biểu thức @var{test}, thế thì câu lệnh @code{for}
là một vòng lặp vô tận (trừ phi bạn đặt câu lệnh @code{break} hay @code{goto}
ở một chỗ nào đó trong @var{statement}).  Điều này giống như sử dụng @code{1}
cho @var{test}; và nó chẳng bao giờ sai.

Câu lệnh @code{for} này bắt đầu in ra các số từ một 1 và sau đó
tiếp tục một cách không giới hạn, luôn in ra giá trị của @code{x} tăng thêm 1:

@example
@group
for (x = 1; ; x++)
  printf ("%d ", x);
@end group
@end example

Nếu bạn bỏ đi biểu thức @var{step}, thế thì không có qui trình nào tạo
nên sự kết thúc vòng lặp---ít nhất không như mong đợi bởi
câu lệnh @code{for}.

Ví dụ này in con số bắt đầu từ 1 và cứ vậy, không giới hạn:

@example
@group
for (x = 1; x <= 10;)
  printf ("%d ", x);
@end group
@end example

Có lẽ hơi phức tạp một chút, bạn không thể sử dụng toán tử dấu phẩy (@pxref{Toán
tử Dấu phẩy}) dành cho việc theo dõi nay chỉnh sửa nội dung nhiểu biến trong một
câu lệnh @code{for}, bởi vì như thường lệ toán tử loại bỏ kết
quả trả về từ toán hạng bên trái.  Vòng lặp này:

@example
@group
int x, y;
for (x = 1, y = 10; x <= 10, y >= 1; x+=2, y--)
  printf ("%d %d\n", x, y);
@end group
@end example

@noindent Xuất ra kết quả:

@example
1 10
3 9
5 8
7 7
9 6
11 5
13 4
15 3
17 2
19 1
@end example

Nếu bạn muốn test sử dụng hai điều kiện, bạn sẽ phải sử dụng
toán tử @code{&&}:

@example
@group
int x, y;
for (x = 1, y = 10; x <= 10 && y >= 1; x+=2, y--)
  printf ("%d %d\n", x, y);
@end group
@end example

Có thể sử dụng câu lệnh @code{break} để chấm dứt vòng lặp @code{for}.

Đây là một ví dụ một hàm tính toán tổng của các bình phương, nhận hai tham số là
một số nguyên bắt đầu để bình phương và số kết thúc việc này:

@example
@group
int
sum_of_squares (int start, int end)
@{
  int i, sum = 0;
  for (i = start; i <= end; i++)
    sum += i * i;
  return sum;
@}
@end group
@end example

@node Khối lệnh
@section Khối lệnh
@cindex khối lệnh
@cindex tổ hợp các lệnh

Một @dfn{khối lệnh} là một tập hợp của không hay nhiều hơn các câu lệnh được bao quanh bởi cặp dấu ngoặc nhọn.
Khối lệnh cũng được biết đến với cái tên @dfn{tổ hợp các lệnh}.  Thông thường, một khối lệnh
được sử dụng như là phần thân của một câu lệnh @code{if} hay các câu lệnh lặp, để mà
nhóm các câu lệnh lại với nhau.

@example
@group
for (x = 1; x <= 10; x++)
  @{
    printf ("x is %d\n", x);
    
    if ((x % 2) == 0)
      printf ("%d is even\n", x);
    else
      printf ("%d is odd\n", x);
  @}
@end group
@end example

Bạn cũng còn có thể đặt các khối lệnh bên trong một khối lệnh khác:

@example
@group
for (x = 1; x <= 10; x++)
  @{
    if ((x % 2) == 0)
      @{
        printf ("x is %d\n", x);
        printf ("%d is even\n", x);
      @}
    else
      @{
        printf ("x is %d\n", x);
        printf ("%d is odd\n", x);
      @}
  @}
@end group
@end example  

Bạn có thể khai báo biến bên trong một khối lệnh; các biến là cục bộ trong
khối đó.  Trong chuẩn C89, khai báo phải trước mọi câu lệnh khác.
Ví dụ sau có mục đích giới thiệu điều này
một cách đơn giản nhất:

@comment scope reference  (locality)

@example
@group
@{
  int x = 5;
  printf ("%d\n", x);
@}
printf ("%d\n", x);   /* @r{Lỗi biên dịch! @code{x} chỉ có thể tồn tại}
                       @r{trong khối của nó mà thôi.} */
@end group
@end example


@node Câu lệnh Rỗng
@section Câu lệnh Rỗng
@cindex câu lệnh rỗng
@cindex câu lệnh, rỗng

@dfn{Câu lệnh rỗng} đơn giản chỉ là có một mình dấu chấm phẩy.

@example
@group
;
@end group
@end example

Một câu lệnh rỗng chẳng làm gì cả.  Nó chẳng lưu trữ giá trị ở đâu cả.
Nó cũng không tốn thời gian thi hành trong chương trình của bạn.

Thông thường nhất, câu lệnh rỗng được sử dụng làm thân của
một câu lệnh lặp, hay là một hay nhiều biểu thức trong câu lệnh
@code{for}.  Đây là một ví dụ về câu lệnh @code{for} mà nó sử dụng
câu lệnh rỗng làm thân của vòng lặp (và cũng tính bình phương của
số nguyên @code{n}, nhưng chỉ cho vui thôi chứ chẳng làm gì cả):

@example
@group
for (i = 1; i*i < n; i++)
  ;
@end group
@end example

Đây là một ví dụ khác mà sử dụng câu lệnh rỗng như là phần thân của
vòng lặp @code{for} và cũng thực hiện việc kết xuất dữ liệu:

@example
@group
for (x = 1; x <= 5; printf ("x is now %d\n", x), x++)
  ;
@end group
@end example

Câu lệnh rỗng đôi khi còn được dùng sau một nhãn mà
nó làm phần cuối của một khối.


@node Câu lệnh goto
@section Câu lệnh @code{goto}
@cindex câu lệnh@code{goto}

Bạn có thể sử dụng câu lệnh @code{goto} để nhẩy tuyệt đối đến một chỗ
khác trong một chương trình. Đây là dạng thức chung của câu lệnh @code{goto}:

@example
goto @var{label};
@end example

Bạn phải chỉ định nhãn mà chương trình nhảy tới; khi một câu lệnh @code{goto}
được thực thi, chương trình sẽ được nhảy đến nhãn đó.  @xref{Nhãn}.  Đây
là một ví dụ:

@example
@group
goto end_of_program;
@dots{}
end_of_program:
@end group
@end example

Nhãn có thể ở bất kỳ vị trí này trong cùng một hàm thì câu lệnh @code{goto}
có thể nhảy đến được, nhưng câu lệnh @code{goto} không thể nhảy tới một
nhãn mà lại ở một hàm khác.

Bạn @emph{có thể} sử dụng câu lệnh @code{goto} để mô phỏng các vòng lặp,
nhưng chúng tôi không khuyến khích bạn làm thế---nó làm cho chương trình trở nên khó đọc, và GCC
không thể tối ưu hóa tốt cho nó được.  Bạn nên sử dụng câu lệnh @code{for},
@code{while}, và @code{do} thay vì câu lệnh @code{goto},
khi có thể.

Phần mở rộng của GCC cho phép câu lệnh goto có thể nhảy đến địa chỉ
được chỉ ra bởi một biến @code{void*}.  Để làm điều này, bạn cũng cần
phải lấy địa chỉ chủa nhãn bằng cách sử dụng toán tử một ngôi
@code{&&} (không phải là @code{&}).  Đây là ví dụ:

@example
@group
enum Play @{ ROCK=0, PAPER=1, SCISSORS=2 @};
enum Result @{ WIN, LOSE, DRAW @};

static enum Result turn (void) 
@{
  const void * const jumptable[] = @{&&rock, &&paper, &&scissors@};
  enum Play opp;                /* @r{opponent's play} */
  goto *jumptable[select_option (&opp)];
 rock:
  return opp == ROCK ? DRAW : (opp == PAPER ? LOSE : WIN);
 paper:
  return opp == ROCK ? WIN  : (opp == PAPER ? DRAW : LOSE);
 scissors:
  return opp == ROCK ? LOSE : (opp == PAPER ? WIN  : DRAW);
@}
@end group
@end example

@c Here we should mention that programs should not jump over an
@c initializer with a goto (and elsewhere say the same for a case
@c label).  However, just now I can't find the section of the C89
@c standard that stipulates this.


@node Câu lệnh break
@section Câu lệnh @code{break}
@cindex câu lệnh @code{break}

Bạn có thể sử dụng câu lệnh @code{break} để chấm dứt một câu lệnh @code{while}, @code{do},
@code{for}, hay @code{switch}.  Đây là một ví dụ:

@example
@group
int x;
for (x = 1; x <= 10; x++)
  @{
    if (x == 8)
      break;
    else
      printf ("%d ", x);
  @}
@end group
@end example

Ví dụ này in các con số từ 1 đến 7.  Khi @code{x} được gia lên thành
8, @code{x == 8} sẽ đúng, thế thì câu lệnh @code{break} được thực hiện,
chấm dứt ngay lập tức vòng lặp @code{for}.

Nếu bạn đặt câu lệnh @code{break} bên trong một vòng lặp hay một câu lệnh @code{switch}
mà bản thân nó cũng nằm trong một vòng lặp hay một câu lệnh @code{switch}, lệnh
@code{break} chỉ chấm dứt vòng lặp hay câu lệnh @code{switch} nằm trong cùng.


@node Câu lệnh continue
@section Câu lệnh @code{continue}
@cindex câu lệnh @code{continue}

Bạn có thể sử dụng câu lệnh @code{continue} trong các vòng lặp để mà chấm dứt
hoạt động của vòng lặp hiện tại và bắt đầu một vòng lặp mới.  Đây là một
ví dụ:

@example
@group
for (x = 0; x < 100; x++)
  @{
    if (x % 2 == 0)
      continue;
    else
      sum_of_odd_numbers + = x;
  @}
@end group
@end example

Nếu bạn đặt câu lệnh @code{continue} ở trong vòng lặp mà bản thân nó lại
ở trong một vòng lặp, thế thì hiệu lực của nó chỉ áp dụng cho vòng lặp trong cùng.



@node Câu lệnh return
@section Câu lệnh @code{return}
@cindex câu lệnh @code{return}

Bạn có thể sử dụng câu lệnh @code{return} để mà kết thúc việc thực thi một hàm
và chuyển chương trình về vị trí mà nó được gọi.  Đây là dạng thức
chung của câu lệnh @code{return}:

@example
return @var{return-value};
@end example

@var{return-value} là tùy chọn của lệnh return.  Nếu
kiểu trả về của hàm là @code{void}, thế thì nó là không hợp lệ nếu trả về
giá trị cho một biểu thức.  Dẫu sao, bạn vẫn có thể sử dụng câu lệnh @code{return}
mà không trả về giá trị nào.

Nếu kiểu trả về từ hàm không cùng kiểu với
@var{return-value}, và việc áp đổi kiểu tự động không được thực thi,
thế thì @var{return-value} được trả về là không hợp lệ.

@comment Reference to type conversion

Nếu kiểu trả về của hàm không là @code{void} và không trả về giá trị
rõ ràng nào, thế thì câu lệnh @code{return} là hợp lệ trừ phi
hàm được gọi mà ngữ cảnh lại yêu cần một giá trị được trả về.  Ví
dụ:

@example
x = cosine (y);
@end example

Trong trường hợp này, hàm @code{cosine} được gọi trong hoàn cảnh là
nó yêu cầu có giá trị trả về, để nó gán giá trị này cho @code{x}.

Ngay cả trong ngữ cảnh nơi mà giá trị trả về là không cần thiết, thì cũng không phải là
ý kiến hay cho việc quên trả về giá trị cho một hàm trả về kiểu khác-@code{void}.  Với GCC, bạn
có thể sử dụng tùy chọn dòng lệnh @code{@w{-Wreturn}-type} để phát ra cảnh báo
khi bạn quên trả về giá trị cho hàm.

Sau đây là các ví dụ sử dụng câu lệnh @code{return}, trong cả trường hợp
hàm trả về @code{void} và khác-@code{void}:

@example
@group
void
print_plus_five (int x)
@{
  printf ("%d ", x + 5);
  return;
@}
@end group
@end example

@example
@group
int
square_value (int x)
@{
  return x * x;
@}
@end group
@end example


@node Câu lệnh typedef
@section The Câu lệnh @code{typedef}
@cindex câu lệnh @code{typedef}

Bạn có thể sử dụng câu lệnh @code{typedef} để tạo ra một cái tên mới cho
kiểu dữ liệu.  Đây là dạng thức chung của câu lệnh @code{typedef}:

@example
typedef @var{old-type-name} @var{new-type-name}
@end example

@var{old-type-name} là tên của kiểu dữ liệu sẵn có, mà có thể gồm có
nhiều hơn một thẻ token (ví dụ như, @code{unsigned long int}).
@var{new-type-name} là tên mới cần đặt cho kiểu đó, và phải
là một định danh đơn.  Việc tạo ra tên mới cho kiểu dữ liệu không có
nghĩa là tên cũ sẽ không còn tồn tại nữa.  Sau đây là một số ví dụ:

@example
@group
typedef unsigned char byte_type;
typedef double real_number_type;
@end group
@end example

@noindent
Trong trường hợp kiểu dữ liệu do người dùng định nghĩa, bạn có thể sử dụng @code{typedef} để tạo ra
một cái tên mới cho kiểu trong khi bạn định nghĩa nó:

@example
@group
typedef struct fish
@{
  float weight;
  float length;
  float probability_of_being_caught;
@} fish_type;
@end group
@end example

@noindent
Để tạo ra định nghĩa kiểu cho một mảng, bạn trước tiên cầu cung cấp kiểu cho phần tử, và
sau đó thiết lập số phần tử tại cuối phần định nghĩa kiểu:

@example
@group
typedef char array_of_bytes [5];
array_of_bytes five_bytes = @{0, 1, 2, 3, 4@};
@end group
@end example

Khi chọn tên cho kiểu, bạn nên tránh đặt tên mà có phần cuối là
@code{_t}.  Trình dịch cho phép bạn làm thế, nhưng
tiêu chuẩn POSIX dành hậu tố @code{_t} để đặt tên cho các kiểu
ở trong thư viện chuẩn.
