
@c This is part of The GNU C Reference Manual
@c Copyright (C) 2008-2009 Free Software Foundation, Inc.
@c See the file gnu-c-manual.texi for copying conditions.

@c ----------------------------------------------------------------------------

@node Hàm
@chapter Hàm
@cindex hàm

Bạn có thể viết các hàm để chia nhỏ chương trình của mình thành từng thủ tục con
riêng rẽ để dễ quản lý.  Để viết một hàm, bạn tối thiểu cũng phải định nghĩa một hàm.
Nhưng tốt hơn cả là nên có một khai báo hàm mẫu trước khi làm thế;
bạn không bắt buộc phải làm vậy nhưng nếu không làm thế, thì
khai báo ẩn theo mặc định có thể không khớp với bản thân hàm đó, và
bạn sẽ bắt gặp những cảnh báo trong khi dịch mã.

Mọi chương trình đều yêu cầu ít nhất một hàm, có tên @code{main}.
Đây chính là nơi bắt đầu thực thi một chương trình.

@menu
* Khai báo hàm mẫu::
* Định nghĩa hàm::
* Gọi Hàm::
* Đối số của hàm::
* Hàm có số lượng đối số thay đổi::
* Gọi Hàm Thông Qua Con trỏ Hàm::
* Hàm main::
* Hàm đệ quy::
* Hàm tĩnh::
* Hàm lồng nhau::
@end menu

@c ----------------------------------------------------------------------------

@node Khai báo hàm
@section Khai báo hàm
@cindex hàm khai báo
@cindex khai báo, hàm

Việc khai báo hàm mẫu là việc bạn định danh cho hàm,
tạo danh sách đối số và kiểu trả của hàm.  Khai báo hàm mẫu kết thúc
bằng dấu chấm phẩy.  Đây là dạng thức chung:

@example
@group
@var{kiểu_trả_về} @var{tên_hàm} (@var{danh_sách_đối số});
@end group
@end example

@var{kiểu_trả_về} chỉ ra kiểu dữ liệu được trả về từ hàm.
Bạn có thể khai báo một hàm không trả về gì cả bằng
kiểu @code{void}.

@var{tên_hàm} có thể là bất kỳ định danh nào hợp lệ (@pxref{Định danh}).

@var{danh_sách_đối số} bao gồm không hay nhiều đối số, ngăn cách nhau bằng dấu phẩy.
Một đối số thông thường bao gồm kiểu dữ liệu và tên tùy chọn cho
đối số.  Bạn còn có thể khai báo hàm mà nó có số lượng đối số thay đổi
(@pxref{Hàm có số lượng đối số thay đổi}), hay chẳng có đối số nào sử dụng
@code{void}.  Nếu bỏ qua @var{danh_sách_đối số} đồng nghĩa với việc
không có đối số, nhưng tốt hơn là chỉ định rõ ràng bằng @code{void}.

Đây là một ví dụ khai báo một hàm với hai đối số:

@example
@group
int foo (int, double);
@end group
@end example

Nếu bạn khai báo cả tên của đối số, thì tên của nó sẽ theo sau kiểu
dữ liệu, giống như thế này:

@example
@group
int foo (int x, double y);
@end group
@end example

Tên của đối số có thể là bất kỳ định danh nào (@pxref{Định danh}), và nếu các bạn
có nhiều hơn một đối số, bạn không thể sử dụng cùng một tên cho nhiều đối
số trong cùng một khai báo.  Tên của các đối số khi khai báo
không bắt buộc khớp với nó khi định nghĩa.

Bạn nên viết khai báo hàm mẫu ở phía trên nơi nó được gọi đầu tiên.
Bạn có thể đặt nó trong tệp tin đầu và sử dụng chỉ thị @code{#include}
để bao gồm phần khai báo vào bất kỳ tệp tin mã nguồn nào cần
sử dụng hàm đó.

@c ----------------------------------------------------------------------------

@node Định nghĩa hàm
@section Định nghĩa hàm
@cindex định nghĩa hàm
@cindex định nghĩa, hàm

Bạn viết định nghĩa hàm để chỉ ra hàm đó thực hiện tác vụ
gì trong thực tế.  Một Định nghĩa hàm bao gồm thông tin về
tên hàm, kiểu trả về, và kiểu và tên của các đối số, cùng với
thân của hàm.  Thân của hàm là các câu lệnh nối tiếp nhau
bao quanh bởi dấu goặc ôm; thực ra nó đơn giản chỉ là một khối (@pxref{Khối}).

Đây là một dạng thức chung của việc định nghĩa hàm:

@example
@group
@var{kiểu_trả_về}
@var{tên_hàm} (@var{danh_sách_đối_số})
@{
  @var{Thân_hàm}
@}
@end group
@end example

@var{kiểu_trả_về} và @var{tên_hàm} thì giống với thứ mà bạn đã sử dụng
trong phần khai báo hàm (@pxref{Khai báo hàm}).

@var{danh_sách_đối_số} tương ứng với chúng trong phần khai báo hàm mẫu
(@pxref{Khai báo hàm mẫu}), ngoại trừ bạn
@emph{phải} có cả tên của tham số trong phần định nghĩa hàm.

Đây là một ví dụ định nghĩa hàm đơn giản---nó nhận hai số nguyên
làm đối số và trả về giá trị tổng của chúng:

@example
@group
int
add_values (int x, int y)
@{
  return x + y;
@}
@end group
@end example

Để tương thích với thiết kế nguyên bản của ngôn ngữ C, các bạn có thể chỉ rõ
kiểu mà hàm trả về @emph{sau} dấu ngoặc đơn cuối cùng
của danh sách đối số, giống như thế này:

@example
@group
int
add_values (x, y)
    int x, int y;
@{
  return x + y;
@}
@end group
@end example

@noindent
Tuy vậy, chúng tôi khuyến nghị bạn không nên sử dụng cách này; nó có thể là nguyên nhân
gây trục trặc với áp đổi kiểu, và một số các trục trặc khác.

@c ----------------------------------------------------------------------------

@node Gọi hàm
@section Gọi hàm
@cindex gọi hàm
@cindex hàm, gọi

Các bạn có thể gọi hàm bằng cách sử dụng tên của nó và cung cấp các đối số cần thiết.
Đây là dạng thức chung của việc gọi hàm:

@example
@var{tên_hàm} (@var{các_đối_số})
@end example

Một cú gọi hàm có thể trở thành một câu lệnh, hay nó cũng có thể được sử dụng như là
một biểu thức con.  Ví dụ sau đây là cú gọi hàm độc lập:

@example
@group
foo (5);
@end group
@end example

@noindent
Trong ví dụ này, hàm @samp{foo} được gọi với
tham số có giá trị bằng @code{5}.

Đây là một ví dụ sử dụng hàm như biểu thức con:

@example
@group
a = square (5);
@end group
@end example

@noindent
Giả sử là hàm @samp{square} bình phương giá trị tham số của nó,
ví dụ phía trên sẽ gán giá trị bằng 25 cho @code{a}.

Nếu tham số có hơn một, bạn hãy sử dụng dấu phẩy để ngăn cách chúng:

@example
@group
a = quux (5, 10);
@end group
@end example 

@c ----------------------------------------------------------------------------

@node Đối số của hàm
@section Đối số của hàm
@cindex đối số của hàm
@cindex đối số, hàm

Đối số của hàm có thể là bất kỳ biểu thức nào---giá trị bằng văn bản, giá trị từ biến,
địa chỉ một ô nhớ, hay một biểu thức phức tạp xây dựng bằng cách
tổ hợp những thứ đó.

Bên trong phần thân hàm, các đối số là một bản sao cục bộ từ giá trị được chuyển giao
cho hàm; bạn không thể thay đổi giá trị thông qua việc thay đổi bản sao.

@example
int x = 23;
foo (x);
@dots{}
/* @r{Định nghĩa cho hàm @code{foo}.} */
int foo (int a)
@{
  a = 2 * a;
  return a;
@}
@end example

@noindent
Trong ví dụ đó, mặc dù đối số @code{a} bị sửa đổi trong
hàm @samp{foo}, biến @code{x} mà đã truyền giá trị cho
hàm không hề bị thay đối.  Nếu như bạn muốn sử dụng hàm để thay đổi
giá trị gốc @code{x}, thế thì bạn nên sử dụng phép gán kết hợp
vơi cú gọi hàm như sau:

@example
x = foo (x);
@end example

Nếu giá trị mà bạn chuyển giao cho hàm là một địa chỉ ô nhớ (đó là một con trỏ), thế thì bạn
có thể truy cập (và thay đổi) dữ liệu được lưu trong ô nhớ đó.  Hiệu ứng
tạo ra cũng giống như việc sử dụng truyền_tham_chiếu_cho_hàm
trong các ngôn ngữ khác, nhưng không đồng nhất với nhau: địa chỉ ô nhớ đơn giản chỉ
là giá trị, giống như các giá trị khác, và không thể tự thân thay đổi.  Sự
khác nhau giữa truyền tham trỏ và truyền số nguyên nằm ở chỗ
bạn có thể làm được gì với giá trị bên trong một hàm.

Đây là ví dụ về việc gọi một hàm với đối số là một con trỏ:

@example
@group
void
foo (int *x)
@{
  *x = *x + 42;
@}
@dots{}
int a = 15;
foo (&a);
@end group
@end example

@noindent
The formal parameter for the function is of type pointer-to-@code{int}, and we
call the function by passing it the address of a variable of type @code{int}.  By
dereferencing the pointer within the function body, we can both see and change
the value stored in the address.  The above changes the value of
@code{a} to @samp{57}.

Even if you don't want to change the value stored in the address, passing the
address of a variable rather than the variable itself can be useful if the
variable type is large and you need to conserve memory space or limit
the performance impact of parameter copying.  For example:

@example
@group
struct foo
@{
  int x;
  float y;
  double z;
@};

void bar (const struct foo *a);
@end group
@end example

@noindent
In this case, unless you are working on a computer with very large memory
addresses, it will take less memory to pass a pointer to the structure
than to pass an instance of the structure.

One type of parameter that is always passed as a pointer is any sort
of array:

@example
@group
void foo (int a[]);
@dots{}
int x[100];
foo (x);
@end group
@end example

@noindent
In this example, calling the function @code{foo} with the parameter @code{a}
does not copy the entire array into a new local parameter within @code{foo};
rather, it passes @code{x} as a pointer to the first element in @code{x}.
Be careful, though: within the function, you cannot use @code{sizeof} to determine
the size of the array @code{x}---@code{sizeof} instead tells you the size of the
pointer @code{x}.   Indeed, the above code is equivalent to:

@example
@group
void foo (int *a);
@dots{}
int x[100];
foo (x);
@end group
@end example

@noindent Explicitly specifying the length of the array in the
parameter declaration will not help.  If you really need to pass an
array by value, you can wrap it in a @code{struct}, though doing this
will rarely be useful (passing a @code{const}-qualified pointer is
normally sufficient to indicate that the caller should not modify the
array).

@c ----------------------------------------------------------------------------

@node Variable Length Parameter Lists
@section Variable Length Parameter Lists
@cindex variable length parameter lists
@cindex parameters lists, variable length
@cindex function parameter lists, variable length

You can write a function that takes a variable number of arguments; these are
called @dfn{variadic functions}.  To do this, the function needs to have at
least one parameter of a known data type, but the remaining parameters are
optional, and can vary in both quantity and data type.

You list the initial parameters as normal, but then after that, use an
ellipsis: @samp{...}.  Here is an example function prototype:

@example
int add_multiple_values (int number, ...);
@end example

To work with the optional parameters in the function definition, you need
to use macros that are defined in the library header file
@samp{<stdarg.h>}, so you must @code{#include} that file.  For a
detailed description of these macros, see @cite{The GNU C
Library} manual's section on variadic hàm.

@comment The above paragraph previously had a proper @ref tag to the
@comment GLIBC section in question, but it didn't seem to render
@comment properly, at least in HTML. Replacing with @cite for now;
@comment feel free to revisit later.

Here is an example:

@example
int
add_multiple_values (int number, ...)
@{
  int counter, total = 0;
  
  /* @r{Declare a variable of type @samp{va_list}.} */
  va_list parameters;

  /* @r{Call the @samp{va_start} function.} */
  va_start (parameters, number);

  for (counter = 0; counter < number; counter++)
    @{
      /* @r{Get the values of the optional parameters.} */
      total += va_arg (parameters, int);
    @}

  /* @r{End use of the @samp{parameters} variable.} */
  va_end (parameters);

  return total;
@}
@end example

@c Need to describe how the default promotion rules are applied to the
@c parameters passed in the ``...''.

To use optional parameters, you need to have a way to know how many
there are.  This can vary, so it can't be hard-coded, but if you
don't know how many optional parameters you have, then you could
have difficulty knowing when to stop using the @samp{va_arg} function.
In the above example, the first parameter to the @samp{add_multiple_values}
function, @samp{number}, is the number of optional parameters actually passed.
So, we might call the function like this:

@example
sum = add_multiple_values (3, 12, 34, 190);
@end example

The first parameter indicates how many optional parameters follow it.

Also, note that you don't actually need to use @samp{va_end} function.
In fact, with GCC it doesn't do anything at all.  However, you might want
to include it to maximize compatibility with other compilers.

@xref{Variadic Hàm, Variadic Hàm, Variadic Hàm, libc, The GNU C Library Reference Manual}.

@node Calling Hàm Through Function Pointers
@section Calling Hàm Through Function Pointers
@cindex function pointers, calling through

You can also call a function identified by a pointer.   The
indirection operator @code{*} is optional when doing this.

@example
@group
#include <stdio.h>

void foo (int i)
@{
  printf ("foo %d!\n", i);
@}
@end group

@group
void bar (int i)
@{
  printf ("%d bar!\n", i);
@}
@end group

@group
void message (void (*func)(int), int times)
@{
  int j;
  for (j=0; j<times; ++j)
    func (j);  /* (*func) (j); would be equivalent. */
@}

void example (int want_foo) 
@{
  void (*pf)(int) = &bar; /* The & is optional. */
  if (want_foo)
    pf = foo;
  message (pf, 5);
@}
@end group
@end example 

@c ----------------------------------------------------------------------------

@node The main Function
@section The @code{main} Function
@cindex main function
@cindex function, main

Every program requires at least one function, called @samp{main}.
This is where the program begins executing.  You do not need to write a
declaration or prototype for @code{main}, but you do need to define it.

The return type for @code{main} is always @code{int}.  You do not have
to specify the return type for @code{main}, but you can.  However, you
@emph{cannot} specify that it has a return type other than @code{int}.

@c ??? The implementation is allowed to support alternative signatures. 

@cindex exit status
@cindex @code{EXIT_FAILURE}
@cindex @code{EXIT_SUCCESS}
@cindex return value of @code{main}

In general, the return value from  @code{main} indicates the program's
@dfn{exit status}.  A value of zero or EXIT_SUCCESS indicates success
and EXIT_FAILURE indicates an error.   Otherwise, the significance of
the value returned is implementation-defined.

@c ??? We don't define it here.

Reaching the @code{@}} at the end of @code{main} without a return, or
executing a @code{return} statement with no value (that is,
@code{return;}) are both equivalent.  In C89, the effect of this is
undefined, but in C99 the effect is equivalent to @code{return 0;}.

You can write your @code{main} function to have no parameters (that
is, as @code{int main (void)}, or to accept parameters from the
command line.  Here is a very simple @code{main} function with no
parameters:

@example
@group
int
main (void)
@{
  puts ("Hi there!");
  return 0;
@}
@end group
@end example

To accept command line parameters, you need to have two parameters in the
@code{main} function, @code{int argc} followed by @code{char *argv[]}.  You
can change the names of those parameters, but they must have those data
types---@code{int} and array of pointers to @code{char}.  @code{argc} is the
number of command line parameters, including the name of the program itself.
@code{argv} is an array of the parameters, as character strings.
@code{argv[0]}, the first element in the array, is the name of the program
as typed at the command line@footnote{Rarely, @code{argv[0]} can be a
null pointer (in
this case @code{argc} is 0) or @code{argv[0][0]} can be the null character.
In any case, @code{argv[argc]} is a null pointer.};
any following array elements are the parameters that followed the name
of the program.

Đây là ví dụ, hàm @code{main} nhận đối số từ dòng lệnh,
và in các đối số đó ra:

@example
@group
int
main (int argc, char *argv[])
@{
  int counter;

  for (counter = 0; counter < argc; counter++)
    printf ("%s\n", argv[counter]);
  
  return 0;
@}
@end group
@end example

@c ----------------------------------------------------------------------------

@node Hàm đệ qui
@section Hàm đệ qui
@cindex đệ qui hàm
@cindex hàm, đệ qui

Bạn có thể viết một hàm mà nó lại gọi chính nó.
Đây là ví dụ tính giai thừa của một số nguyên:

@example
int
factorial (int x)
@{
  if (x < 1)
    return x;
  else
    return (x * factorial (x - 1));
@}
@end example

Hãy cẩn thận vì bạn có thể tạo ra sự đệ quy vô hạn.
Trong ví dụ trên, khi @code{x} là 1, việc đệ quy kết thúc.
Tuy nhiên, trong ví dụ sau đây, sự đệ quy sẽ chỉ dừng lại khi chương trình bị ngắt hay tràn bộ nhớ:

@example
@group
int
watermelon (int x)
@{
  return (watermelon (x));
@}
@end group
@end example

Hàm dĩ nhiêu cũng có thể đệ quy một cách gián tiếp.

@c ----------------------------------------------------------------------------

@node Hàm tĩnh
@section Hàm tĩnh
@cindex hàm tĩnh
@cindex hàm, tĩnh
@cindex tĩnh linkage

Bạn có thể định nghĩa một hàm là tĩnh nếu bạn muốn nó chỉ có thể gọi được
chỉ trong tệp tin nguồn nơi nó được định nghĩa:

@example
@group
static int
foo (int x)
@{
  return x + 42;
@}
@end group
@end example

@noindent
This is useful if you are building a reusable library of hàm and need to
include some subroutines that should not be callable by the end user.

Hàm được định nghĩa theo cách này yêu cầu phải có @dfn{static
linkage}.  Nhưng thật không may từ khóa @code{static} lại đa
nghĩa ; @ref{Storage Class Specifiers}.

@c ----------------------------------------------------------------------------

@node Hàm lồng nhau
@section Hàm lồng nhau
@cindex lồng hàm
@cindex hàm, lồng
 
Đây là một phần mở rộng của GNU C, bạn có thể định nghĩa hàm bên trong một hàm khác,
kỹ thuật này thường được biết đến với cái tên hàm lồng nhau.
 
Đây là một ví dụ về hàm tính giai thừa đệ qui, định nghĩa
sử dụng hàm lồng nhau:
 
@example
@group
int
factorial (int x)
@{
  int
  factorial_helper (int a, int b)
  @{
    if (a < 1)
    @{
      return b;
    @}
    else
    @{
      return factorial_helper ((a - 1), (a * b));
    @}
  @}

 return factorial_helper (x, 1);
@}
@end group
@end example

Chú ý là hàm lồng nhau phải được định nghĩa cùng với các biến số
ở đầu của một hàmn, và tất cả các câu lệnh khác theo sau đó.
