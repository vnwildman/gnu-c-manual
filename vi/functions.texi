
@c This is part of The GNU C Reference Manual
@c Copyright (C) 2008-2009 Free Software Foundation, Inc.
@c See the file gnu-c-manual.texi for copying conditions.

@c ----------------------------------------------------------------------------

@node Hàm
@chapter Hàm
@cindex hàm

Bạn có thể viết các hàm để chia nhỏ chương trình của mình thành từng thủ tục con
riêng rẽ để dễ quản lý.  Để viết một hàm, bạn tối thiểu cũng phải định nghĩa một hàm.
Nhưng tốt hơn cả là nên có một khai báo hàm trước khi làm thế;
bạn không bắt buộc phải làm vậy nhưng nếu không làm thế, thì
khai báo ẩn theo mặc định có thể không khớp với bản thân hàm đó, và
bạn sẽ bắt gặp những cảnh báo trong khi dịch mã.

Mọi chương trình đều yêu cầu ít nhất một hàm, có tên @code{main}.
Đây chính là nơi bắt đầu thực thi một chương trình.

@menu
* Khai báo hàm::
* Định nghĩa hàm::
* Gọi Hàm::
* Tham số của hàm::
* Hàm có số lượng tham số thay đổi::
* Gọi hàm thông qua con trỏ hàm::
* Hàm main::
* Hàm đệ quy::
* Hàm tĩnh::
* Hàm lồng nhau::
@end menu

@c ----------------------------------------------------------------------------

@node Khai báo hàm
@section Khai báo hàm
@cindex hàm khai báo
@cindex khai báo, hàm

Việc khai báo hàm là việc bạn định danh cho hàm,
tạo danh sách tham số và kiểu trả của hàm.  Khai báo hàm kết thúc
bằng dấu chấm phẩy.  Đây là dạng thức chung:

@example
@group
@var{kiểu_trả_về} @var{tên_hàm} (@var{danh_sách_tham_số});
@end group
@end example

@var{kiểu_trả_về} chỉ ra kiểu dữ liệu được trả về từ hàm.
Bạn có thể khai báo một hàm không trả về gì cả bằng
kiểu @code{void}.

@var{tên_hàm} có thể là bất kỳ định danh nào hợp lệ (@pxref{Định danh}).

@var{danh_sách_tham_số} bao gồm không hay nhiều tham số, ngăn cách nhau bằng dấu phẩy.
Một tham số thông thường bao gồm kiểu dữ liệu và tên tùy chọn cho
tham số.  Bạn còn có thể khai báo hàm mà nó có số lượng tham số thay đổi
(@pxref{Hàm có số lượng tham số thay đổi}), hay chẳng có tham số nào sử dụng
@code{void}.  Nếu bỏ qua @var{danh_sách_tham_số} đồng nghĩa với việc
không có tham số, nhưng tốt hơn là chỉ định rõ ràng bằng @code{void}.

Đây là một ví dụ khai báo một hàm với hai tham số:

@example
@group
int foo (int, double);
@end group
@end example

Nếu bạn khai báo cả tên của tham số, thì tên của nó sẽ theo sau kiểu
dữ liệu, giống như thế này:

@example
@group
int foo (int x, double y);
@end group
@end example

Tên của tham số có thể là bất kỳ định danh nào (@pxref{Định danh}), và nếu các bạn
có nhiều hơn một tham số, bạn không thể sử dụng cùng một tên cho nhiều tham
số trong cùng một khai báo.  Tên của các tham số khi khai báo
không bắt buộc khớp với nó khi định nghĩa.

Bạn nên viết khai báo hàm ở phía trên nơi nó được gọi đầu tiên.
Bạn có thể đặt nó trong tệp tin đầu và sử dụng chỉ thị @code{#include}
để bao gồm phần khai báo vào bất kỳ tệp tin mã nguồn nào cần
sử dụng hàm đó.

@c ----------------------------------------------------------------------------

@node Định nghĩa hàm
@section Định nghĩa hàm
@cindex định nghĩa hàm
@cindex định nghĩa, hàm

Bạn viết định nghĩa hàm để chỉ ra hàm đó thực hiện tác vụ
gì trong thực tế.  Một Định nghĩa hàm bao gồm thông tin về
tên hàm, kiểu trả về, và kiểu và tên của các tham số, cùng với
thân của hàm.  Thân của hàm là các câu lệnh nối tiếp nhau
bao quanh bởi dấu goặc ôm; thực ra nó đơn giản chỉ là một khối (@pxref{Khối}).

Đây là một dạng thức chung của việc định nghĩa hàm:

@example
@group
@var{kiểu_trả_về}
@var{tên_hàm} (@var{danh_sách_tham_số})
@{
  @var{Thân_hàm}
@}
@end group
@end example

@var{kiểu_trả_về} và @var{tên_hàm} thì giống với thứ mà bạn đã sử dụng
trong phần khai báo hàm (@pxref{Khai báo hàm}).

@var{danh_sách_tham_số} tương ứng với chúng trong phần khai báo hàm
(@pxref{Khai báo hàm}), ngoại trừ bạn
@emph{phải} có cả tên của tham số trong phần định nghĩa hàm.

Đây là một ví dụ định nghĩa hàm đơn giản---nó nhận hai số nguyên
làm tham số và trả về giá trị tổng của chúng:

@example
@group
int
add_values (int x, int y)
@{
  return x + y;
@}
@end group
@end example

Để tương thích với thiết kế nguyên bản của ngôn ngữ C, các bạn có thể chỉ rõ
kiểu mà hàm trả về @emph{sau} dấu ngoặc đơn cuối cùng
của danh sách tham số, giống như thế này:

@example
@group
int
add_values (x, y)
    int x, int y;
@{
  return x + y;
@}
@end group
@end example

@noindent
Tuy vậy, chúng tôi khuyến nghị bạn không nên sử dụng cách này; nó có thể là nguyên nhân
gây trục trặc với áp đổi kiểu, và một số các trục trặc khác.

@c ----------------------------------------------------------------------------

@node Gọi hàm
@section Gọi hàm
@cindex gọi hàm
@cindex hàm, gọi

Các bạn có thể gọi hàm bằng cách sử dụng tên của nó và cung cấp các tham số cần thiết.
Đây là dạng thức chung của việc gọi hàm:

@example
@var{tên_hàm} (@var{các_tham_số})
@end example

Một cú gọi hàm có thể trở thành một câu lệnh, hay nó cũng có thể được sử dụng như là
một biểu thức con.  Ví dụ sau đây là cú gọi hàm độc lập:

@example
@group
foo (5);
@end group
@end example

@noindent
Trong ví dụ này, hàm @samp{foo} được gọi với
tham số có giá trị bằng @code{5}.

Đây là một ví dụ sử dụng hàm như biểu thức con:

@example
@group
a = square (5);
@end group
@end example

@noindent
Giả sử là hàm @samp{square} bình phương giá trị tham số của nó,
ví dụ phía trên sẽ gán giá trị bằng 25 cho @code{a}.

Nếu tham số có hơn một, bạn hãy sử dụng dấu phẩy để ngăn cách chúng:

@example
@group
a = quux (5, 10);
@end group
@end example 

@c ----------------------------------------------------------------------------

@node Tham số của hàm
@section Tham số của hàm
@cindex tham số của hàm
@cindex tham số, hàm

Tham số của hàm có thể là bất kỳ biểu thức nào---giá trị bằng văn bản, giá trị từ biến,
địa chỉ một ô nhớ, hay một biểu thức phức tạp xây dựng bằng cách
tổ hợp những thứ đó.

Bên trong phần thân hàm, các tham số là một bản sao cục bộ từ giá trị được chuyển giao
cho hàm; bạn không thể thay đổi giá trị thông qua việc thay đổi bản sao.

@example
int x = 23;
foo (x);
@dots{}
/* @r{Định nghĩa cho hàm @code{foo}.} */
int foo (int a)
@{
  a = 2 * a;
  return a;
@}
@end example

@noindent
Trong ví dụ đó, mặc dù tham số @code{a} bị sửa đổi trong
hàm @samp{foo}, biến @code{x} mà đã truyền giá trị cho
hàm không hề bị thay tham.  Nếu như bạn muốn sử dụng hàm để thay đổi
giá trị gốc @code{x}, thế thì bạn nên sử dụng phép gán kết hợp
vơi cú gọi hàm như sau:

@example
x = foo (x);
@end example

Nếu giá trị mà bạn chuyển giao cho hàm là một địa chỉ ô nhớ (đó là một con trỏ), thế thì bạn
có thể truy cập (và thay đổi) dữ liệu được lưu trong ô nhớ đó.  Hiệu ứng
tạo ra cũng giống như việc sử dụng truyền_tham_chiếu_cho_hàm
trong các ngôn ngữ khác, nhưng không đồng nhất với nhau: địa chỉ ô nhớ đơn giản chỉ
là giá trị, giống như các giá trị khác, và không thể tự thân thay đổi.  Sự
khác nhau giữa truyền tham trỏ và truyền số nguyên nằm ở chỗ
bạn có thể làm được gì với giá trị bên trong một hàm.

Đây là ví dụ về việc gọi một hàm với tham số là một con trỏ:

@example
@group
void
foo (int *x)
@{
  *x = *x + 42;
@}
@dots{}
int a = 15;
foo (&a);
@end group
@end example

@noindent
Tham số hình thức cho một hàm là kiểu con-trỏ-tới-@code{int}, và chúng ta
gọi hàm bằng cách chuyển cho chúng địa chỉ của biến kiểu @code{int}.  Bằng việc
con trỏ tham chiếu ở trong thân của hàm, chúng ta có thể vừa xem và thay đổi
giá trị của chúng ở địa chỉ này.  Lệnh trên thay đổi giá trị của
@code{a} thành @samp{57}.

Ngay cả khi bạn không muốn thay đổi các giá trị trong ô nhớ, truyền địa chỉ
của biến thay vì chính bản thân biến cũng rất hữu ích nếu như
kiểu biến số có độ rộng rất lớn và bạn phải sử dụng tiết kiệm bộ nhớ hay phải tăng
hiệu suất xử lý bằng cách tránh hàm phải sao chép tham số.  Ví dụ:

@example
@group
struct foo
@{
  int x;
  float y;
  double z;
@};

void bar (const struct foo *a);
@end group
@end example

@noindent
Trong trường hợp này, trừ phi bạn đang sở hữu một chiếc máy tính có bộ nhớ rất lớn,
nó sẽ lấy một ô nhớ nhỏ hơn để truyền con trỏ đến cấu trúc
hơn là truyền cả cấu trúc.

Có một kiểu tham số luôn được truyền dưới dạng com trỏ là
mảng:

@example
@group
void foo (int a[]);
@dots{}
int x[100];
foo (x);
@end group
@end example

@noindent
Trong ví dụ này, việc gọi hàm @code{foo} với tham số @code{a}
không sao chép toàm bộ nội dung của mảng vào một biến số nội bộ của hàm @code{foo};
đúng hơn là, nó truyền @code{x} như là một con trỏ mà nó lại chỉ đến phần tử đầu tiên trong @code{x}.
Hãy cẩn thận, though: within the function, bạn không thể sử dụng @code{sizeof} để mà xác định
kích thước của mảng @code{x}---@code{sizeof} thay vào đó nó sẽ chỉ cho bạn biết kích thước của
con trỏ @code{x}.   Quả thực, đoạn mã trên thì tương đương với:

@example
@group
void foo (int *a);
@dots{}
int x[100];
foo (x);
@end group
@end example

@noindent Rõ ràng việc chỉ định kích thước của mảng trong phần
khai báo tham số sẽ chẳng ích gì.  Nếu bạn thực sự cần truyền một
mảng bằng giá trị của nó, bạn có thể bọc nó vào trong một @code{struct}, mặc dù làm thế
sẽ ít hữu dụng (truyền một con trỏ có hạn định @code{const} là
đủ để chỉ ra là nơi gọi hàm không thể sửa đổi
một mảng).

@c ----------------------------------------------------------------------------

@node Hàm có số lượng tham số thay đổi
@section Hàm có số lượng tham số thay đổi
@cindex hàm có số lượng tham số thay đổi
@cindex tham số, thay đổi
@cindex tham số hàm, thay đổi

Bạn có thể viết mộthàm mà số lượng tham số của nó thể thay đổi; những hàm đó
được gọi là @dfn{hàm biến đổi}.  Để làm được điều này, hàm cần phải có ít nhất
là một tham số thuộc một kiểu định trước, nhưng các tham số còn lại là
tùy chọn, và có thể thay đổi cả về số lượng và kiểu dữ liệu.

Khởi tạo tham số như thông thường, nhưng sau đó, sử dụng một
dấu chấm lửng: @samp{...}.  Đây là một nguyên mẫu hàm ví dụ:

@example
int add_multiple_values (int number, ...);
@end example

Để sử dụng các tham số tùy chọn trong phần định nghĩa hàm, bạn cần
phải sử dụng macro để mà khai báo có sử dụng thư viện
@samp{<stdarg.h>}, do đó bạn phải @code{#include} tệp tin đó.  Để có
mô tả chi tiết về các macro, xem phần hàm biến đổi trong sổ tay tra cứu
@cite{The GNU C Library}.

@comment The above paragraph previously had a proper @ref tag to the
@comment GLIBC section in question, but it didn't seem to render
@comment properly, at least in HTML. Replacing with @cite for now;
@comment feel free to revisit later.

Đây là ví dụ:

@example
int
add_multiple_values (int number, ...)
@{
  int counter, total = 0;
  
  /* @r{Declare a variable of type @samp{va_list}.} */
  va_list parameters;

  /* @r{Call the @samp{va_start} function.} */
  va_start (parameters, number);

  for (counter = 0; counter < number; counter++)
    @{
      /* @r{Get the values of the optional parameters.} */
      total += va_arg (parameters, int);
    @}

  /* @r{End use of the @samp{parameters} variable.} */
  va_end (parameters);

  return total;
@}
@end example

@c Need to describe how the default promotion rules are applied to the
@c parameters passed in the ``...''.

Để sử dụng các tham số tùy chọn, bạn cần phải biết có bao nhiêu trường hợp
xảy ra ở đây.  Nó có thể biến đổi, do vậy nó không thể viết mã một cách cứng nhắc được,
nhưng nếu bạn không biết trước có bao nhiêu tham số tùy chọn, thế thì có lẽ
rất khó để biết được khi nào thì dừng việc sử dụng hàm @samp{va_arg}.
Trong ví dụ trên, tham số đầu tiên truyền cho hàm @samp{add_multiple_values},
@samp{number}, là số các tham số thực sự được truyền cho hàm.
Do vậy, chúng ta có lẽ có thể gọi hàm theo các này:

@example
sum = add_multiple_values (3, 12, 34, 190);
@end example

Tham số đầu tiên chỉ ra số tham số tùy chọn theo sau nó.

Ngoài ra, chú ý là bạn không thực sự cần thiết phải sử dụng hàm @samp{va_end}.
Trên thực tế, với GCC nó chẳng làm gì cho bạn đâu.  Tuy vậy, bạn cần phải bao
gồm nó vào để có được sự tương thích toàn diện với các trình biên dịch mã khác.

@xref{Variadic Functions, Variadic Functions, Variadic Functions, libc, The GNU C Library Reference Manual}.

@node Gọi hàm thông qua con trỏ hàm
@section Gọi hàm thông qua con trỏ hàm
@cindex con trỏ hàm, gọi hàm thông qua

Bạn còn có thể gọi một hàm được định nghĩa bởi một con trỏ.
Toàn tử @code{*} là tùy chọn khi làm điều này.

@example
@group
#include <stdio.h>

void foo (int i)
@{
  printf ("foo %d!\n", i);
@}
@end group

@group
void bar (int i)
@{
  printf ("%d bar!\n", i);
@}
@end group

@group
void message (void (*func)(int), int times)
@{
  int j;
  for (j=0; j<times; ++j)
    func (j);  /* (*func) (j); là tương đương. */
@}

void example (int want_foo) 
@{
  void (*pf)(int) = &bar; /* Toán tử & là tùy chọn. */
  if (want_foo)
    pf = foo;
  message (pf, 5);
@}
@end group
@end example 

@c ----------------------------------------------------------------------------

@node Hàm main
@section Hàm @code{main}
@cindex hàm main
@cindex hàm, main

Mọi chương chình đều yêu cầu tối thiểu nhất cũng phải có một hàm, đó là hàm @samp{main}.
Đây chính là nơi chương trình bắt đầu được thi hành.  Bạn không cần viết khai báo
hay nguyên mẫu cho hàm @code{main}, nhưng bạn phải định nghĩa nó.

Kiểu trả về cho @code{main} thường là @code{int}.  Bạn không phải
chỉ định kiểu trả về từ hàm @code{main}, nhưng bạn có thể làm thế.  Tuy thế, bạn
@emph{không thể} định kiểu trả về cho nó khác @code{int}.

@c ??? The implementation is allowed to support alternative signatures. 

@cindex trạng thái thoát
@cindex @code{EXIT_FAILURE}
@cindex @code{EXIT_SUCCESS}
@cindex giá trị trả về từ @code{main}

Thông thường, giá trị từ hàm @code{main} cho ta biết @dfn{trạng thái thoát}
của chương trình.  Giá trị là zero hay EXIT_SUCCESS cho biết thành công
và EXIT_FAILURE chỉ ra rằng chương trình đã thất bại.   Nếu không, ý nghĩa của giá trị
trả về là do hệ thống chỉ định.

@c ??? We don't define it here.

Tới @code{@}} ở cuối cùng của hàm @code{main} mà không có lệnh return, hay
có câu lệnh @code{return} nhưng không có giá trị (chính là,
@code{return;}) là như nhau.  Trong chuẩn C89, kết quả là
bất định, nhưng trong C99 kết quả tương đương với @code{return 0;}.

Bạn có thể viết hàm @code{main} không có tham số nào (đó là,
 @code{int main (void)}, hay chấp nhận đối số từ
dòng lệnh.  Đây là một ví dụ đơn giản về hàm @code{main} không
có tham số:

@example
@group
int
main (void)
@{
  puts ("Hi there!");
  return 0;
@}
@end group
@end example

Để chấp nhận đối số từ dòng lệnh, bạn phải có hai tham số trong hàm
@code{main}, @code{int argc} theo sau là @code{char *argv[]}.  Bạn
có thể thay tên cho tham số này, nhưng chúng phải có kiểu dữ liệu
---@code{int} và mảng con trỏ đến @code{char}.  @code{argc} là số
đối số nhận từ dòng lệnh, bao gồm tên của cả bản thân chương trình.
@code{argv} là một mảng các tham số, như là chuỗi ký tự.
@code{argv[0]}, phần tử đầu tiên của mảng, là tên của chương trình
như lúc gõ tại dòng lệnh@footnote{Rất hiếm, @code{argv[0]} có thể là
con trỏ null (trong
trường hợp này @code{argc} là 0) hay @code{argv[0][0]} có thể là ký tự null.
Trong trường hợp này, @code{argv[argc]} là con trỏ null.};
các phần tử khác là tham số đi theo sau tên
của chương trình.

Đây là ví dụ, hàm @code{main} nhận tham số từ dòng lệnh,
và in các tham số đó ra:

@example
@group
int
main (int argc, char *argv[])
@{
  int counter;

  for (counter = 0; counter < argc; counter++)
    printf ("%s\n", argv[counter]);
  
  return 0;
@}
@end group
@end example

@c ----------------------------------------------------------------------------

@node Hàm đệ qui
@section Hàm đệ qui
@cindex đệ qui hàm
@cindex hàm, đệ qui

Bạn có thể viết một hàm mà nó lại gọi chính nó.
Đây là ví dụ tính giai thừa của một số nguyên:

@example
int
factorial (int x)
@{
  if (x < 1)
    return x;
  else
    return (x * factorial (x - 1));
@}
@end example

Hãy cẩn thận vì bạn có thể tạo ra sự đệ quy vô hạn.
Trong ví dụ trên, khi @code{x} là 1, việc đệ quy kết thúc.
Tuy nhiên, trong ví dụ sau đây, sự đệ quy sẽ chỉ dừng lại khi chương trình bị ngắt hay tràn bộ nhớ:

@example
@group
int
watermelon (int x)
@{
  return (watermelon (x));
@}
@end group
@end example

Hàm dĩ nhiêu cũng có thể đệ quy một cách gián tiếp.

@c ----------------------------------------------------------------------------

@node Hàm tĩnh
@section Hàm tĩnh
@cindex hàm tĩnh
@cindex hàm, tĩnh
@cindex tĩnh liên kết

Bạn có thể định nghĩa một hàm là tĩnh nếu bạn muốn nó chỉ có thể gọi được
chỉ trong tệp tin nguồn nơi nó được định nghĩa:

@example
@group
static int
foo (int x)
@{
  return x + 42;
@}
@end group
@end example

@noindent
Kiểu hàm này rất hữu ích nếu bạn phải xây dựng hàm cho thư viện mà nó có thể tái sử dụng và cần phải
bao gồm một số thủ tục con mà nó không được gọi bởi người sử dụng cuối.

Hàm được định nghĩa theo cách này yêu cầu phải có @dfn{liên kết
tĩnh}.  Nhưng thật không may từ khóa @code{static} lại đa
nghĩa ; @ref{Storage Class Specifiers}.

@c ----------------------------------------------------------------------------

@node Hàm lồng nhau
@section Hàm lồng nhau
@cindex lồng hàm
@cindex hàm, lồng
 
Đây là một phần mở rộng của GNU C, bạn có thể định nghĩa hàm bên trong một hàm khác,
kỹ thuật này thường được biết đến với cái tên hàm lồng nhau.
 
Đây là một ví dụ về hàm tính giai thừa đệ qui, định nghĩa
sử dụng hàm lồng nhau:
 
@example
@group
int
factorial (int x)
@{
  int
  factorial_helper (int a, int b)
  @{
    if (a < 1)
    @{
      return b;
    @}
    else
    @{
      return factorial_helper ((a - 1), (a * b));
    @}
  @}

 return factorial_helper (x, 1);
@}
@end group
@end example

Chú ý là hàm lồng nhau phải được định nghĩa cùng với các biến số
ở đầu của một hàmn, và tất cả các câu lệnh khác theo sau đó.
