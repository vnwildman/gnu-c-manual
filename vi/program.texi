
@c This is part of The GNU C Reference Manual
@c Copyright (C) 2007-2009 Free Software Foundation, Inc.
@c See the file gnu-c-manual.texi for copying conditions.

@c ----------------------------------------------------------------------------

@node Cấu trúc chương trình và Hoạt vi
@chapter Cấu trúc chương trình và Hoạt vi

Now that we have seen all of the fundamental elements of C programs, it's time
to look at the big picture.

@menu
* Cấu trúc chương trình::
* Hoạt vi::
@end menu

@node Cấu trúc chương trình
@section Cấu trúc chương trình
@cindex Cấu trúc chương trình
@cindex cấu trúc, chương trình

A C program may exist entirely within a single source file, but more commonly, any non-trivial
program will consist of several custom header files and source files, and will also include
and link with files from existing libraries.

By convention, header files (với đuôi ``.h'') contain variable and function
declarations, and source files (with a ``.c'' extension) contain the corresponding
definitions.  Source files may also store declarations, if these declarations are
not for objects which need to be seen by
other files.  However, header files almost certainly should not contain any definitions.

For example, if you write a function that computes square roots, and you wanted this function
to be accessible to files other than where you define the function, then you would put the
function declaration into a header file (with a ``.h'' file extension):

@example
@group
/* @r{sqrt.h} */

double
computeSqrt (double x);
@end group
@end example

@noindent
This header file could be included by other source files which need to use your function,
but do not need to know how it was implemented.

The implementation of the function would then go into a corresponding source file
(with a ``.c'' file extension):

@example
@group
/* @r{sqrt.c} */
#include "sqrt.h"

double
computeSqrt (double x)
@{
  double result;
  @dots{}
  return result;
@}
@end group
@end example



@node Hoạt vi
@section Hoạt vi
@cindex hoạt vi

@c actually hoạt vi is something else; this is more properly termed
@c ``static linkage'' (as opposed to external linkage).

Hoạt vi refers to what parts of the program can ``see'' a declared object.  A declared
object can be visible only within a particular function, or within a particular file,
or may be visible to an entire set of files by way of including header files and
using @code{extern} declarations.

Unless explicitly stated otherwise, declarations made at the top-level of a file
(i.e., not within a function) are visible to the entire file, including from within
functions, but are not visible outside of the file.

Khai báo ở trong các hàm thì chỉ khả dụng trong các hàm đó.

Một biến sẽ chỉ khả dụng khi khai báo trước khi dùng; ví dụ:

@example
@group
int x = 5;
int y = x + 10;
@end group
@end example

@noindent
sẽ hoạt động nhưng:

@example
@group
int x = y + 10;
int y = 5;
@end group
@end example

@noindent
sẽ không.

@xref{Storage Class Specifiers}, để biết thêm thông tin về việc thay đổi
hoạt vi của đỗi tượng đã khai báo.  Cũng nên xem @ref{Static Functions}.

