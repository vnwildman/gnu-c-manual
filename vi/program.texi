
@c This is part of The GNU C Reference Manual
@c Copyright (C) 2007-2009 Free Software Foundation, Inc.
@c See the file gnu-c-manual.texi for copying conditions.

@c ----------------------------------------------------------------------------

@node Cấu trúc chương trình và Hoạt vi
@chapter Cấu trúc chương trình và Hoạt vi

Cho đến lúc này chúng ta đã biết được phần lớn các phần tử cấu thành nên một chương trình viết bằng ngôn ngữ C,
giờ là lúc tìm hiểu tổng thể của bức tranh.

@menu
* Cấu trúc chương trình::
* Hoạt vi::
@end menu

@node Cấu trúc chương trình
@section Cấu trúc chương trình
@cindex Cấu trúc chương trình
@cindex cấu trúc, chương trình

Một chương trình C có thể chứa trong một file mã nguồn đơn, nhưng thông thường, bất kỳ chương trình
không kể loại quá đơn giản nào cũng sẽ bao gồm nhiều file header riêng và các file mã nguồn, và sẽ cũng bao bao gồm (include)
và liên kết với các file từ các thư viện sẵn có.

Theo quy ước, các header file (với đuôi ``.h'') chứa khai báo các biến và hàm,
và file mã nguồn (với phần đuôi mở rộng là ``.c'') chứa các định nghĩa
tương ứng.  File mã nguồn cũng có thể chứa các khai báo, nếu những đối
tượng được khai báo này là không cần được thấy bởi các file khác.
Tuy nhiên, hầu như toàn bộ các header file nhất định là không nên chứa phần định nghĩa.

Ví dụ, nếu bạn viết một hàm để tính toán căn bậc hai, và bạn muốn hàm này
có thể truy cập bởi các file khác, thế thì bạn hãy đặt phần khai báo hàm
trong header file (có phần mở rộng ``.h''):

@example
@group
/* @r{sqrt.h} */

double
computeSqrt (double x);
@end group
@end example

@noindent
Header file này có thể được bao gồm (include) bởi các file mã nguồn mà nó cần đến hàm này,
nhưng không cần biết nó được thi hành như thế nào.

Phần mã thực thi của hàm được viết trong file nguồn tương ứng với nó
(với phần mở rộng là ``.c''):

@example
@group
/* @r{sqrt.c} */
#include "sqrt.h"

double
computeSqrt (double x)
@{
  double result;
  @dots{}
  return result;
@}
@end group
@end example



@node Hoạt vi
@section Hoạt vi
@cindex hoạt vi

@c actually hoạt vi is something else; this is more properly termed
@c ``static linkage'' (as opposed to external linkage).

Hoạt vi được hiểu là các phần của chương trình có thể ``thấy'' một đối tượng đã được khai báo.  Một đối
tượng đã được khai báo sẽ chỉ khả dụng bên trong một hàm nhất định, hay trong một file nhất định,
hay còn có thể khả dụng trong toàn bộ một file bằng cách bao gồm (include) header files và
sử dụng khai báo @code{extern}.

Trừ phi có chỉ định khác, khai báo tại vị trí đầu của một file
(tức là không ở bên trong một hàm) là khả dụng trong toàn bộ, bao gồm cả phía trong
của các hàm, nhưng không khả dụng với bên ngoài của file đó.

Khai báo ở trong các hàm thì chỉ khả dụng trong các hàm đó.

Một biến sẽ chỉ khả dụng khi khai báo trước khi dùng; ví dụ:

@example
@group
int x = 5;
int y = x + 10;
@end group
@end example

@noindent
sẽ hoạt động nhưng:

@example
@group
int x = y + 10;
int y = 5;
@end group
@end example

@noindent
sẽ không.

Xem @xref{Chỉ định Lớp Lưu trữ}, để biết thêm thông tin về sự thay đổi
hoạt vi của đối tượng đã khai báo.  Cũng nên xem @ref{Hàm tĩnh}.

