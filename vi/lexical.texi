
@c This is part of The GNU C Reference Manual
@c Copyright (C) 2004-2009 Free Software Foundation, Inc.
@c See the file gnu-c-manual.texi for copying conditions.

@node Phần tử thuật ngữ
@chapter Phần tử thuật ngữ
@cindex phần tử thuật ngữ

Chương này mô tả các phần tử mang tính thuật ngữ mà nó tạo nên mã nguồn ngôn ngữ C
sau quá trình tiền xử lý.  Các phần tử này được gọi là @dfn{thẻ}. Có
năm kiểu thẻ:  từ khóa, định danh, hằng, toán tử, và thẻ
ngăn cách.  Khoảng trắng, đôi khi dùng để ngăn cách thẻ, thì cũng
được mô tả trong chương này.

@menu
* Định danh::
* Từ khóa::
* Hằng số::
* Toán tử::
* Thẻ ngăn cách::
* Khoảng trắng::
@end menu


@node Định danh
@section Định danh
@cindex định danh

Định danh là một chuỗi các chữ cái được sử dụng cho việc đặt tên các biến,
hàm, kiểu dữ liệu mới, và macro tiền xử lý.  Các chữ cái
có thể là chữ, chữ số thập phân, ký tự gạch nối dưới @samp{_}.

Chữ cái đầu tiên của định danh không thể là chữ số.

Chữ hoa và chữ thường là khác nhau, như là
@code{foo} và @code{FOO} là hai định danh khác nhau.

Khi sử dụng phần mở rộng của GNU, bạn cũng có thể bao gồm cả dấu dollar
@samp{$} trong việc định danh.


@node Từ khóa
@section Từ khóa
@cindex từ khóa

Từ khóa là những định danh đặc biệt dành riêng cho bản thân
ngôn ngữ lập trình.  Bạn không thể sử dụng chúng cho một mục đích khác.  

Đây là danh sách các từ khóa được thừa nhận theo chuẩn ANSI C89:

@example
auto break case char const continue default do double else enum extern
float for goto if int long register return short signed sizeof static
struct switch typedef union unsigned void volatile while
@end example

ISO C99 thêm các từ khóa sau:

@example
inline _Bool _Complex _Imaginary
@end example

@noindent
và phần mở rộng của GNU thêm các từ khóa sau:

@example
__FUNCTION__ __PRETTY_FUNCTION__ __alignof __alignof__ __asm
__asm__ __attribute __attribute__ __builtin_offsetof __builtin_va_arg
__complex __complex__ __const __extension__ __func__ __imag __imag__ 
__inline __inline__ __label__ __null __real __real__ 
__restrict __restrict__ __signed __signed__ __thread __typeof
__volatile __volatile__ 
@end example

Cả ISO C99 và C89 với phần mở rộng GNU, từ khóa sau được thừa nhận
như là một phần điều khiển:
@example
restrict
@end example

@node Hằng số
@section Hằng số
@cindex hằng số

Một hằng số là một số đơn thuần hay giá trị của ký tự, như là 5 hay `m'.  Tất cả
các hằng số có một kiểu dữ liệu đặc thù; bạn có thể áp đổi kiểu để định kiểu một
cách rõ ràng cho một hằng, hay là để bộ dịch sử dụng kiểu mặc định trên cơ sở
giá trị của hằng.

@menu 
* Hằng số nguyên::
* Hằng ký tự::
* Hằng số thực::
* Hằng xâu chuỗi::
@end menu


@node Hằng số nguyên
@subsection Hằng số nguyên
@cindex hằng số nguyên
@cindex hằng số, nguyên

Một hằng số nguyên là một chuỗi các chữ số.

Nếu một chuỗi các chữ số được đặt trước bởi @code{0x} hay @code{0X} (zero x hay
zero X), thế thì hằng này sẽ được coi là có định dạng thập lục phân (cơ số 16).  Hệ thập lục phân
có thể chấp nhận chữ số từ 0 đến 9, cũng như các chữ cái từ @code{a} đến
@code{f} và @code{A} đến @code{F}. 

@example
@group
0x2f
0x88
0xAB43
0xAbCd
0x1
@end group
@end example

Nếu số đầu tiên là 0 (số không), và ký tự tiếp theo không là @code{x} hay
@code{X}, thì hằng số được hiểu theo hệ bát phân (cơ số 8).
Hệ bát phân chỉ sử dụng số từ 0 đến 7; 8 và 9 là không được phép.
Sau đây là các ví dụ:

@example
@group
057
012
03
0241
@end group
@end example

Trong các trường hợp còn lại, chuỗi chữ số được quy về hệ đếm thập phân
(cơ số 10).  Hệ đếm thập phân sử dụng chữ số từ
0 đến 9. Đây là các ví dụ:

@example
@group
459
23901
8
12
@end group
@end example

Có nhiều biến thể của kiểu dữ liệu số nguyên, short integers, long integers,
signed integers, và unsigned integers.  Bạn có thể buộc một hằng nguyên
ở dạng số dài có hoặc không dấu bằng cách nối thêm một chuỗi
của một hay hơn các chữ cái vào phần cuối của hằng:
@table @code

@item u
@itemx U
Kiểu nguyên không dấu.

@item l
@itemx L
Kiểu số nguyên dài.

@end table

Chẳng hạn như, @code{45U} là một hằng nguyên không dấu @code{unsigned int}.  Bạn cũng có thể
tổ hợp các chữ cái: @code{45UL} là một hằng số nguyên dài không dấu @code{unsigned long int}.
(Các chữ cái có thể sử dụng theo bất kỳ thứ tự nào.) 

Cả ISO C99 và phần mở rộng của GNU C đều thêm kiểu số nguyên @code{long long int}
và @code{unsigned long long int}.  Bạn có thể sử dụng hai chữ @code{L} để có được một hằng
@code{long long int}; và một chữ @code{U} vào đó để bạn có một hằng
@code{unsigned long long int}.  Ví dụ: @code{45ULL}.


@node Hằng
@subsection Hằng ký tự
@cindex hằng ký tự
@cindex hằng số, ký tự

Một hằng ký tự thông thường là một chữ cái đơn bao quanh bởi dấu
nháy đơn, như là @code{'Q'}.  Một hằng ký tự thì thuộc kiểu
@code{int} theo mặc định.

Một số ký tự, chẳng hạn như dấu nháy đơn @code{'}, bản thân nó
không thể biểu diễn được mà chỉ sử dụng một ký tự đơn.  Để biểu diễn những ký tự như thế,
có một số cách để ``thoát chuỗi'' mà các bạn có thể dùng:


@table @code

@item \\
Ký tự gạch ngược Backslash.

@item \?
Ký tự dấu hỏi.

@item \'
Dấu nháy đơn.

@item \"
Dấu nháy đôi.

@item \a
Tiếng chuông cảnh báo.

@item \b
Ký tự xóa lùi Backspace.

@item \e
Ký tự <ESC>.  (Đây là phần mở rộng của GNU.)

@item \f
Form feed.

@item \n
Ký tự dòng mới.

@item \r
Trở về đầu dòng.

@item \t
Tab ngang.

@item \v
Tab dọc.

@item \o, \oo, \ooo
Số bát phân.

@item \xh, \xhh, \xhhh, @dots{}
Số theo hệ thập lục phân.

@end table

Để sử dụng các ký tự thoát chuỗi này, bao quanh chuỗi bằng dấu nháy
đơn, và sử dụng chúng như các ký tự khác.  Ví dụ,
chữ cái m là @code{'m'} và ký tự xuống dòng là @code{'\n'}.

Thoát chuỗi bằng số theo hệ bát phân là ký tự gạch ngược backslash theo sau là
một, hai hay ba chữ số bát phân (0 tới 7). Ví dụ, 101 là
số bát phân tương đương với 65, mà nó trong bảng mã ASCII là chữ cái @code{'A'}. Do vậy,
hằng ký tự @code{'\101'} là tương đương với hằng ký tự
@code{'A'}.

Thoát chuỗi bằng số theo hệ thập lục phân là ký tự gạch ngược backslash theo sau là
@code{x} và không giới hạn các ký tự số thập lục phân (0 tới 9, và
@code{a} đến @code{f} hay @code{A} đến @code{F}).

Trong khi độ dài của chuỗi ký tự thập lục phân là không giới hạn, trị số của
hằng ký tự thì không thế.  (Nhiều nhất trong 
bảng mã ASCII mở rộng, ví dụ thế, chỉ có 256 ký tự trong đó.) 
Nếu bạn sử dụng giá trị theo hệ bát phân nằm ngoài vùng giá trị của ký tự,
bạn sẽ gặp lỗi khi biên dịch mã.


@node Hằng số thực
@subsection Hằng số thực
@cindex hằng số thập phân
@cindex hằng số, số thập phân
@cindex hằng số thực
@cindex hằng số, số thực

Hằng số thực là giá trị đại diện cho một số thập phân (chấm
động).  Nó bao gồm một chuỗi các chữ số đại diện cho phần
nguyên (hay ``toàn bộ'') của số, một dấu chấm, và
một chuỗi các chữ số đại diện cho phần thập phân.

Phần nguyên hoặc phần thập phân có thể được bỏ qua, nhưng không
thể bỏ qua cả hai.  Đây là một số ví dụ:


@example
@group
double a, b, c, d, e, f;

a = 4.7;

b = 4.;

c = 4;

d = .7;

e = 0.7;
@end group
@end example

@noindent
(Trong câu lệnh thứ ba, hằng số nguyên 4 được tự động
chuyển giá trị sang giá trị dạng double.)

Hằng số thực cũng có thể theo sau bởi @code{e} hay
@code{E}, và một số mũ.  Số mũ có thể là dương
hay âm.


@example
@group
double x, y;

x = 5e2;   /* @r{@code{x} is 5 * 100, or 500.0.} */
y = 5e-2;  /* @r{@code{y} is 5 * (1/100, or 0.05.} */
@end group
@end example

Bạn có thể thêm vào cuối hằng số thực một chữ cái để
nó trở thành kiểu dữ liệu đặc thù.  Nếu bạn thêm vào đuôi chữ
F (hay f) vào một hằng số thực, vậy thì nếu kểu của nó là @code{float}.
Nếu bạn thêm vào đuôi chữ L (hay l), vậy thì nếu kểu của nó là @code{long double}.
Nếu bạn thêm vào đuôi chữ nào, vậy thì nếu kểu của nó là @code{double}.


@node Hằng chuỗi
@subsection Hằng chuỗi
@cindex chuỗi hằng số
@cindex chuỗi văn bản

Hằng chuỗi bao gồm các ký tự, chữ số và/hoặc các ký tự thoát chuỗi
liên tiếp nhau bao quanh bởi một dấu nháy kép.  Một hằng chuỗi
là kiểu ``mảng ký tự''.  Tất cả các hằng chuỗi đều chứa một
ký tự cầm canh null (@code{\0}) ở vị trí cuối cùng.  Chuỗi
được lưu giữ là một mảng các ký tự, mà không có thuộc tính kích cỡ.
Ký tự cầm canh null giúp cho các hàm xử lý chuỗi biết đâu
là nơi chuỗi kết thúc.

Các hằng chuỗi đặt kề nhau được móc nối (kết hợp) vào
một chuỗi, với ký tự cầm canh null được thêm vào cuối
cùng của chuỗi kết quả.

Một chuỗi không thể chứa dấu nháy kép, bởi vì
dấu nháy kép được sử dụng để bao một chuỗi.  Để chuỗi
chứa dấu nháy kép như là một ký tự thông thường, thì dùng @code{\"}
để thoát chuỗi.  Bạn có thể sử dụng bất kỳ cách thoát chuỗi nào
sử dụng được cho hằng ký tự dành cho hằng chuỗi.  Đây là vài ví dụ
về hằng chuỗi:

@example
@group
/* @r{Đây là một hằng chuỗi đơn.} */
"tutti frutti ice cream"

/* @r{Các chuỗi này sẽ được móc nối, kết quả thì vẫn giống như ở trên.} */
"tutti " "frutti" " ice " "cream"

/* @r{Cái này lại sử dụng hai ký tự thoát chuỗi.} */
"\"hello, world!\""
@end group
@end example

@noindent
Nếu một chuỗi quá dài để đặt vừa trên một dòng, các bạn có thể sử dụng dấu gạch ngược backslash @code{\}
để ngắt chúng ra và đặt trên nhiều dòng.

@example
@group
"Today's special is a pastrami sandwich on rye bread with \
a potato knish and a cherry soda."
@end group
@end example

@noindent
Các chuỗi đặt kề nhau sẽ tự động bị nối lại, do đó bạn còn có thể đặt hằng
chuỗi trải rộng trên nhiều dòng.
Ví dụ:

@example
@group
"Tomorrow's special is a corned beef sandwich on "
"pumpernickel bread with a kasha knish and seltzer water."
@end group
@end example

@noindent
thì cũng tương đương với

@example
@group
"Tomorrow's special is a corned beef sandwich on \
pumpernickel bread with a kasha knish and seltzer water."
@end group
@end example

Để chèn thêm ký tự xuống dòng vào một chuỗi, để khi chuỗi được in
ra sẽ tạo ra hai dòng, các bạn sử dụng ký hiệu thoát chuỗi
@samp{\n} để xuống dòng.

@example
printf ("potato\nknish");
@end example

@noindent
kết quả sẽ in ra

@example
@group
potato
knish
@end group
@end example

@c TJR: Removing this paragraph until we can determine for sure what
@c limit (including ``no limit'') GCC imposes on string constant length.
@c
@c All ANSI C89 systems must support string constant of at least 509
@c characters after concatenation of adjacent literals.   GCC appears not
@c to have a fixed limit (string hằng số of hundreds of Megabytes will
@c work).

@c ANSI C89, sec 5.2.4.1, ``Translation Limits''.

@node Toán tử
@section Toán tử
@cindex toán tử như là một phần tử thuật ngữ

Một toán tử là một dấu hiệu đặc biệt để thực hiện các phép toán, như là
cộng hay trừ, trên cơ sở một, hai, hay ba toán hạng.
Mô tả chi tiết về các toán tử sẽ được tìm thấy trong chương
sau.  @xref{Biểu thức và Toán tử}.


@node Thẻ ngăn cách
@section Thẻ ngăn cách
@cindex thẻ ngăn cách

Một thẻ ngăn cách tách các ký hiệu.  Khoảng trắng (xem ở phần tiếp theo) có chức năng
ngăn cách, nhưng nó không phải là một thẻ.  Thẻ ngăn cách khác bản thân nó
đều là thẻ đơn ký tự:

@example
( ) [ ] @{ @} ; , . :
@end example


@node Khoảng trắng
@section Khoảng trắng
@cindex khoảng trắng

Khoảng trắng là một tập hợp của một số ký tự:
ký tự khoảng trắng, ký tự tab, ký tự xuống dòng, ký tự
tab dọc, và ký tự form-feed \014.
Khoảng trắng bị bỏ qua (ngoại trừ hằng chuỗi và
hằng ký tự), và do vậy là một tùy chọn, trừ phi khi nó được
sử dụng như thẻ ngăn cách.  Điều này có nghĩa là

@example
@group
#include <stdio.h>

int
main()
@{
  printf( "hello, world\n" );
  return 0;
@}
@end group
@end example

@noindent
và

@example
@group
#include <stdio.h> int main()@{printf("hello, world\n");
return 0;@}
@end group
@end example

@noindent
về mặt chức năng là cùng một chương trình.

Mặc dù bạn phải sử dụng khoảng trắng để ngăn cách nhiều thẻ, không
bắt buộc khoảng trắng giữa các toán tử và toán hạng, cũng không
yêu cầu giữa thẻ ngăn cách khác và cái chúng ngăn cách.


@example
@group
/* @r{Tất cả đều hợp lệ.} */

x++;
x ++ ;
x=y+z;
x = y + z ;
x=array[2];
x = array [ 2 ] ;
fraction=numerator / *denominator_ptr;
fraction = numerator / * denominator_ptr ;
@end group
@end example

@noindent
Hơn thế nữa, bất kể chỗ nào một khoảng trắng hay nhiều
cũng được phép.

@example
@group
/* @r{Hai câu lệnh dưới đây thực chất là một.} */
x++;

x
       ++       ;
@end group
@end example

Hằng chuỗi, khoảng trắng và tab không bị bỏ qua; đúng hơn, chúng là
một phần của chuỗi.  Do đó,

@example
"potato knish"
@end example

@noindent
không giống với

@example
"potato                        knish"
@end example
